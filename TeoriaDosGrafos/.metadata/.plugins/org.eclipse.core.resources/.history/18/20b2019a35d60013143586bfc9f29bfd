package Algoritmo;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class AlgoritmoHuffman {

	public Arvore montarArvoreDeCompactacao(String texto){
		List<FrequenciaLetra> listaDeFrequencias = SepararPorFrequencia(texto);
		List<NoArvore> nos = new ArrayList<NoArvore>();
		for(FrequenciaLetra f : listaDeFrequencias){
			nos.add(new NoArvore(String.valueOf(f.getLetra()), f.getFrequencia()));
		}
		while(nos.size() > 1){
			NoArvore n1 = nos.remove(0);
			NoArvore n2 = nos.remove(0);
			NoArvore newNo = new NoArvore(n1, n2);
			nos.add(newNo);
			Collections.sort(nos);
		}
		return new Arvore(nos.get(0));
	}
	
	public List<FrequenciaLetra> SepararPorFrequencia(String texto) {
		
		List<FrequenciaLetra> lista = new ArrayList<FrequenciaLetra>();
		for(char c: texto.toCharArray()){
			FrequenciaLetra frequencia = new FrequenciaLetra(c);
			if(lista.contains(frequencia)){
				for(FrequenciaLetra frequenciaArmazenada : lista){
					if(frequenciaArmazenada.equals(frequencia)){
						frequencia = frequenciaArmazenada;
					}
				}
			}
			else{
				lista.add(frequencia);
			}
			frequencia.IncrementarQtdOcorrencias();
		}
		
		Collections.sort(lista);

		return lista;
	}

	public Map<String, String> ObterDicionario(Arvore arvore) {
		Map<String, String> dicionario = new HashMap<String, String>();
		for(NoArvore no : arvore.obterNosFolhas()){
			dicionario.put(no.getValor(), no.getCaminho());
		}
		return dicionario;
	}

	public String CompartarInformandoUmaArvore(String texto, Arvore arvore) {
		Map<String, String> dicionario = ObterDicionario(arvore);
		String conteudoCompactado = arvore.toString();
		
		for(int i = 0; i < texto.length(); i++){
			String valor = dicionario.get(String.valueOf(texto.charAt(i)));
			conteudoCompactado += valor;
		}
		
		return conteudoCompactado;
	}

}
