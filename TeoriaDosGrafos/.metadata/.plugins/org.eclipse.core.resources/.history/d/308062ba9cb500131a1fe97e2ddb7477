package AlgoritmoBusca;

import java.util.HashMap;
import java.util.Map;

public class BuscaEmProfundidade {
	
	public VetorRoteamento buscar(Grafo grafo){
		Map<Vertice, String> cor = new HashMap<Vertice, String>();
		Map<Vertice, Integer> d = new HashMap<Vertice, Integer>();
		Map<Vertice, Integer> f = new HashMap<Vertice, Integer>();
		
		VetorRoteamento vetorRoteamento = new VetorRoteamento(grafo);
		Tempo tempo = new Tempo();
		
		for(Vertice u : grafo.getVertices())
		{
			System.out.println("Marcando o vertice " + u +" com a cor Branca");
			cor.put(u, "BRANCO");
		}
		
		for(Vertice u : grafo.getVertices())
		{
			if(cor.get(u) == "BRANCO")
			{
				visitarVertice(u, vetorRoteamento, cor, d, f, tempo);
			}
		}
		
		return vetorRoteamento;
	}
	
	private void visitarVertice(Vertice u, VetorRoteamento vetorRoteamento, Map<Vertice, String> cor, Map<Vertice, Integer> d, Map<Vertice, Integer> f, Tempo tempo)
	{
		System.out.println("Visitando o vertice " + u);
		
		cor.put(u, "CINZA");
		tempo.adicionarUm();
		d.put(u, tempo.getTempo());
		
		vetorRoteamento.setTempoVertice(u, tempo.getTempo());
		for(Vertice v : u.getAdjacencias())
		{
			if(cor.get(v) == "BRANCO"){
				vetorRoteamento.setPaiVertice(v, u);
				visitarVertice(v, vetorRoteamento, cor, d, f, tempo);
			}
		}
		cor.put(u, "PRETO");
		tempo.adicionarUm();;
		f.put(u, tempo.getTempo());
	}
}
